lines(predictions$f, col="red",lwd=2)
lines(ll,lty=2, col="green",lwd=2)
lines(ul,lty=2, col="green",lwd=2)
######################################################
#          One-step ahead forecast error for the last 9 years                #
######################################################
print(" Mean absolute forecast error")
# Mean absolute forecast error (MAE)
mean(abs(log.WI.filt2$f[1800:1908] - log.WI.ts[1800:1908]))
print(" Mean squared forecast error (MSE)")
# Mean squared forecast error (MSE)
mean((log.WI.filt2$f[1800:1908] - log.WI.ts[1800:1908])^2)
print(" Mean absolute percentage forecast error (MAPE)")
# Mean absolute percentage forecast error (MAPE)
mean(abs(log.WI.filt2$f[1800:1908] - log.WI.ts[1800:1908]) / log.WI.ts[1800:1908])
plot(log.WI.filt2$f,ylim=c(9,11))
lines(log.WI.ts,col="green")
# DLM with polynomial second-order trend and seasonality modeled with a seasonal factor representation.
build <- function(parm) {
dlmModPoly(order = 2, dV = exp(parm[1]), dW = c(exp(parm[2]),exp(parm[3]))) + dlmModTrig(s = 7, dV = 0, dW=exp(parm[4]))
}
fit <- dlmMLE(log.WI.ts, rep(0,4), build)
fit$convergence
BIC.2nd.seasfactor <-  2 *  fit$value + length(fit$par) * log(length(log.WI.ts))
print("BIC")
BIC.2nd.seasfactor
model.WI <- build(fit$par)  #This is part where he takes the model parameters
print("Observational noise from MLE")
model.WI$V
print("Innovation variance matrix diagonal elements from MLE")
model.WI$W[1:2,1:2]
log.WI.filt2 <- dlmFilter(log.WI.ts, model.WI)
cov.filt <- with(log.WI.filt2, dlmSvd2var(U.C, D.C))
seas.term = 2
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.WI.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
seas.term = 4
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.WI.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
seas.term = 6
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.WI.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
seas.term = 8
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.WI.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
###################
#   Forecasting   #
###################
predictions <- dlmForecast(log.WI.filt2, n=28)
ll = predictions$f - 1.96 * sqrt(unlist(predictions$Q))
ul = predictions$f + 1.96 * sqrt(unlist(predictions$Q))
plot(log.WI.ts, xlab = "", col = "darkgrey",xlim=c(250,300),lwd=2)
#plot(log.choc, xlab = "", col = "darkgrey",xlim=c(1958,2000), ylim=c(1000,10000),lwd=2)
lines(predictions$f, col="red",lwd=2)
lines(ll,lty=2, col="green",lwd=2)
lines(ul,lty=2, col="green",lwd=2)
######################################################
#          One-step ahead forecast error for the last 9 years                #
######################################################
print(" Mean absolute forecast error")
# Mean absolute forecast error (MAE)
mean(abs(log.WI.filt2$f[1800:1908] - log.WI.ts[1800:1908]))
print(" Mean squared forecast error (MSE)")
# Mean squared forecast error (MSE)
mean((log.WI.filt2$f[1800:1908] - log.WI.ts[1800:1908])^2)
print(" Mean absolute percentage forecast error (MAPE)")
# Mean absolute percentage forecast error (MAPE)
mean(abs(log.WI.filt2$f[1800:1908] - log.WI.ts[1800:1908]) / log.WI.ts[1800:1908])
plot(log.WI.filt2$f,ylim=c(9,11))
lines(log.WI.ts,col="green")
View(log.WI.filt2)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
pacf(res)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
acf(res)
acf(res,lag.max = 16)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
acf(res,lag.max = 16)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
acf(res,lag.max = 16)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
acf(res,lag.max = 16)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
acf(res,lag.max = 16)
acf(res,lag.max = 1)
acf(res,lag.max = 100)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
acf(res,lag.max = 260)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
par(mfrow=c(2,1))
plot(res,type='h'); abline(h=0)
acf(res,lag.max = 260)
pacf(res)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
par(mfrow=c(2,1))
acf(res,lag.max = 260)
pacf(res)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
par(mfrow=c(1,2))
acf(res,lag.max = 260)
pacf(res)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
par(mfrow=c(1,2))
acf(res,lag.max = 260)
pacf(res,lag.max = 260)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
par(mfrow=c(1,2))
acf(res,lag.max = 260)
pacf(res,lag.max = 260)
# Plot qq-plot of one-step ahead forecast errors
qqnorm(res); qqline(res)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
par(mfrow=c(1,2))
acf(res,lag.max = 260)
pacf(res,lag.max = 260)
# Plot qq-plot of one-step ahead forecast errors
qqnorm(res); qqline(res)
# Test normality with the Shapiro-Wilk normality test
# H_0: errors are normally distribution
# H_A: errors are not normally distribution
shapiro.test(res)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.WI.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
par(mfrow=c(1,2))
acf(res,lag.max = 260)
pacf(res,lag.max = 260)
# Plot qq-plot of one-step ahead forecast errors
qqnorm(res); qqline(res)
# Test normality with the Shapiro-Wilk normality test
# H_0: errors are normally distribution
# H_A: errors are not normally distribution
shapiro.test(res)
Box.test(res, lag=20, type="Ljung")
sapply(1 : 20, function(i)
Box.test(res, lag = i, type = "Ljung-Box")$p.value)
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.CA.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
par(mfrow=c(1,2))
acf(res,lag.max = 260)
pacf(res,lag.max = 260)
# Plot qq-plot of one-step ahead forecast errors
qqnorm(res); qqline(res)
# Test normality with the Shapiro-Wilk normality test
# H_0: errors are normally distribution
# H_A: errors are not normally distribution
shapiro.test(res)
# Test autocorrelation with the Ljung-Box test
# H_0: errors are independent
# H_A: errors exhibit serial correlation
Box.test(res, lag=20, type="Ljung")
sapply(1 : 20, function(i)
Box.test(res, lag = i, type = "Ljung-Box")$p.value)
require(dlm)
log.CA.ts=log(CA.ts)
plot(log.CA.ts)
log.WI.ts=log(WI.ts)
plot(log.WI.ts)
log.TX.ts=log(TX.ts)
plot(log.TX.ts)
build <- function(parm) {
dlmModPoly(order = 2, dV = exp(parm[1]), dW = c(exp(parm[2]),exp(parm[3]))) + dlmModTrig(s = 7, dV = 0, dW=exp(parm[4]))
}
fit <- dlmMLE(log.TX.ts, rep(0,4), build)
fit$convergence
BIC.2nd.seasfactor <-  2 *  fit$value + length(fit$par) * log(length(log.TX.ts))
print("BIC")
BIC.2nd.seasfactor
model.TX<- build(fit$par)  #This is part where he takes the model parameters
print("Observational noise from MLE")
model.TX$V
print("Innovation variance matrix diagonal elements from MLE")
model.TX$W[1:2,1:2]
log.TX.filt2 <- dlmFilter(log.TX.ts, model.TX)
cov.filt <- with(log.TX.filt2, dlmSvd2var(U.C, D.C))
seas.term = 2
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.TX.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
seas.term = 4
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.TX.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
seas.term = 6
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.TX.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
seas.term = 8
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.TX.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
###################
#   Forecasting   #
###################
predictions <- dlmForecast(log.TX.filt2, n=28)
ll = predictions$f - 1.96 * sqrt(unlist(predictions$Q))
ul = predictions$f + 1.96 * sqrt(unlist(predictions$Q))
plot(log.TX.ts, xlab = "", col = "darkgrey",xlim=c(250,300),lwd=2)
#plot(log.choc, xlab = "", col = "darkgrey",xlim=c(1958,2000), ylim=c(1000,10000),lwd=2)
lines(predictions$f, col="red",lwd=2)
lines(ll,lty=2, col="green",lwd=2)
lines(ul,lty=2, col="green",lwd=2)
######################################################
#          One-step ahead forecast error for the last 9 years                #
######################################################
print(" Mean absolute forecast error")
# Mean absolute forecast error (MAE)
mean(abs(log.TX.filt2$f[1800:1908] - log.TX.ts[1800:1908]))
print(" Mean squared forecast error (MSE)")
# Mean squared forecast error (MSE)
mean((log.WI.filt2$f[1800:1908] - log.WI.ts[1800:1908])^2)
print(" Mean absolute percentage forecast error (MAPE)")
# Mean absolute percentage forecast error (MAPE)
mean(abs(log.WI.filt2$f[1800:1908] - log.WI.ts[1800:1908]) / log.WI.ts[1800:1908])
plot(log.WI.filt2$f,ylim=c(9,11))
lines(log.WI.ts,col="green")
build <- function(parm) {
dlmModPoly(order = 2, dV = exp(parm[1]), dW = c(exp(parm[2]),exp(parm[3]))) + dlmModTrig(s = 7, dV = 0, dW=exp(parm[4]))
}
fit <- dlmMLE(log.TX.ts, rep(0,4), build)
fit$convergence
BIC.2nd.seasfactor <-  2 *  fit$value + length(fit$par) * log(length(log.TX.ts))
print("BIC")
BIC.2nd.seasfactor
model.TX<- build(fit$par)  #This is part where he takes the model parameters
print("Observational noise from MLE")
model.TX$V
print("Innovation variance matrix diagonal elements from MLE")
model.TX$W[1:2,1:2]
log.TX.filt2 <- dlmFilter(log.TX.ts, model.TX)
cov.filt <- with(log.TX.filt2, dlmSvd2var(U.C, D.C))
seas.term = 2
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.TX.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
seas.term = 4
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.TX.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
seas.term = 6
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.TX.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
seas.term = 8
sd.seasonality.filt2 <- rep(NA,length(cov.filt))
for(i in 1:length(cov.filt)) sd.seasonality.filt2[i] = sqrt(cov.filt[[i]][seas.term,seas.term])
sd.seasonality.filt2 = ts(sd.seasonality.filt2[-(1:8)],frequency=7)
seasonality.filt2 = ts(log.TX.filt2$m[-(1:8),seas.term],frequency=7)
ll = seasonality.filt2 - 1.96 * sd.seasonality.filt2
ul = seasonality.filt2 + 1.96 * sd.seasonality.filt2
llim = min(ll)
ulim = max(ul)
plot(seasonality.filt2,ylim=c(llim,ulim))
lines(ll,lty=2,col="green")
lines(ul,lty=2,col="green")
llim = min(c(min(seasonality.filt2/sd.seasonality.filt2),-1.96))
ulim = max(c(max(seasonality.filt2/sd.seasonality.filt2),1.96))
plot(seasonality.filt2/sd.seasonality.filt2,ylim=c(llim,ulim))
abline(h=1.96,lty=2)
abline(h=-1.96,lty=2)
###################
#   Forecasting   #
###################
predictions <- dlmForecast(log.TX.filt2, n=28)
ll = predictions$f - 1.96 * sqrt(unlist(predictions$Q))
ul = predictions$f + 1.96 * sqrt(unlist(predictions$Q))
plot(log.TX.ts, xlab = "", col = "darkgrey",xlim=c(250,300),lwd=2)
#plot(log.choc, xlab = "", col = "darkgrey",xlim=c(1958,2000), ylim=c(1000,10000),lwd=2)
lines(predictions$f, col="red",lwd=2)
lines(ll,lty=2, col="green",lwd=2)
lines(ul,lty=2, col="green",lwd=2)
######################################################
#          One-step ahead forecast error for the last 9 years                #
######################################################
print(" Mean absolute forecast error")
# Mean absolute forecast error (MAE)
mean(abs(log.TX.filt2$f[1800:1908] - log.TX.ts[1800:1908]))
print(" Mean squared forecast error (MSE)")
# Mean squared forecast error (MSE)
mean((log.WI.filt2$f[1800:1908] - log.WI.ts[1800:1908])^2)
print(" Mean absolute percentage forecast error (MAPE)")
# Mean absolute percentage forecast error (MAPE)
mean(abs(log.WI.filt2$f[1800:1908] - log.WI.ts[1800:1908]) / log.WI.ts[1800:1908])
plot(log.WI.filt2$f,ylim=c(8,10))
lines(log.WI.ts,col="green")
# Following snippet of ccode is for model diagonstics
# Get one-step ahead forecast errors
res <- residuals(log.TX.filt2, sd=FALSE)
# Plot one-step ahead forecast errors
plot(res,type='h'); abline(h=0)
par(mfrow=c(1,2))
acf(res,lag.max = 260)
pacf(res,lag.max = 260)
# Plot qq-plot of one-step ahead forecast errors
qqnorm(res); qqline(res)
# Test normality with the Shapiro-Wilk normality test
# H_0: errors are normally distribution
# H_A: errors are not normally distribution
shapiro.test(res)
# Test autocorrelation with the Ljung-Box test
# H_0: errors are independent
# H_A: errors exhibit serial correlation
Box.test(res, lag=20, type="Ljung")
sapply(1 : 20, function(i)
Box.test(res, lag = i, type = "Ljung-Box")$p.value)
par(mfrow=c(2,2))
install_tinytex()
install_tinytex()
tinytex::install_tinytex()
